# Usage: rbenv rehash [<version>]
# Summary: Rehash rbenv shims (run this after installing executables)
# Help: rbenv rehash      => rehash existing commands using current global version
# rbenv rehash gem  => rehash a gem across versions
#

param($cmd)


$REHASH_TEMPLATE = @'
# Auto generated by 'rbenv rehash'
. $env:RBENV_ROOT\rbenv\lib\version.ps1

$executable = get_executable_location $PSCommandPath
& $executable $args
'@


# called every time after you install a gem
#
# $gem_name shouldn't have suffix
#
function rehash_for_a_single_gem ($where, $gem_name) {
    Set-Content "$where\$gem_name.ps1" $REHASH_TEMPLATE
}


# rehash for ruby.exe and rubyw.exe
function rehash_for_ruby_exe ($where) {
    Set-Content "$where\ruby.ps1"   $REHASH_TEMPLATE
    Set-Content "$where\rubyw.ps1"  $REHASH_TEMPLATE
    success "rbenv: rehash ruby.exe rubyw.exe"
}


# called every time after you install a new Ruby version
function rehash_all ($where) {
    rehash_for_ruby_exe $where

    $bats = Get-ChildItem "$where\*.bat" | % { $_.Name}

    # remove .bat suffix
    $gems = $bats | % { strip_ext $_}

    foreach ($gem in $gems) {
        rehash_for_a_single_gem $where $gem
    }
    success "rbenv: rehash $($gems.Count) gems"
    success "rbenv: success rehash all for $where"
}

if (!$cmd) {

    $cur_ver, $_ = get_current_version_with_setmsg
    $where = "$env:RBENV_ROOT\shims\bin"
    rehash_all $where
} else {
    $version = auto_fix_version_for_installed $cmd
    $where = "$env:RBENV_ROOT\$version\bin"
    rehash_all $where
}
